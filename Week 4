# Woerd Scores
def getWordScore(word, n):
    """
    Returns the score for a word. Assumes the word is a valid word.

    The score for a word is the sum of the points for letters in the
    word, multiplied by the length of the word, PLUS 50 points if all n
    letters are used on the first turn.

    Letters are scored as in Scrabble; A is worth 1, B is worth 3, C is
    worth 3, D is worth 2, E is worth 1, and so on (see SCRABBLE_LETTER_VALUES)

    word: string (lowercase letters)
    n: integer (HAND_SIZE; i.e., hand size required for additional points)
    returns: int >= 0
    """
    
    score = 0
    
        
    for char in word:
        score += SCRABBLE_LETTER_VALUES[char]
        
    
    score *= len(word)
    
    
    if len(word) == n:
        score += 50
        
    return score


# Dealing with Hands
def updateHand(hand, word):
    """
    Assumes that 'hand' has all the letters in word.
    In other words, this assumes that however many times
    a letter appears in 'word', 'hand' has at least as
    many of that letter in it. 

    Updates the hand: uses up the letters in the given word
    and returns the new hand, without those letters in it.

    Has no side effects: does not modify hand.

    word: string
    hand: dictionary (string -> int)    
    returns: dictionary (string -> int)
    """
    current_hand = hand.copy()
    for char in word:
        current_hand[char] -= 1
    return current_hand
    
# Valid Words
def isValidWord(word, hand, wordList):
    """
    Returns True if word is in the wordList and is entirely
    composed of letters in the hand. Otherwise, returns False.

    Does not mutate hand or wordList.
   
    word: string
    hand: dictionary (string -> int)
    wordList: list of lowercase strings
    """
    if word not in wordList:
        return False
    else:
        for i in word:
            if word.count(i) > hand.get(i, 0):
                return False
        return True
        
# Hand Length
def calculateHandlen(hand):
    """ 
    Returns the length (number of letters) in the current hand.
    
    hand: dictionary (string int)
    returns: integer
    """
    hand_length = 0
    hand_keys = hand.keys()
    for key in hand_keys:
        hand_length += hand[key]
    return hand_length
    
# Playing a Hand
def playHand(hand, wordList, n):
    """
    Allows the user to play the given hand, as follows:

    * The hand is displayed.
    * The user may input a word or a single period (the string ".") 
      to indicate they're done playing
    * Invalid words are rejected, and a message is displayed asking
      the user to choose another word until they enter a valid word or "."
    * When a valid word is entered, it uses up letters from the hand.
    * After every valid word: the score for that word is displayed,
      the remaining letters in the hand are displayed, and the user
      is asked to input another word.
    * The sum of the word scores is displayed when the hand finishes.
    * The hand finishes when there are no more unused letters or the user
      inputs a "."

      hand: dictionary (string -> int)
      wordList: list of lowercase strings
      n: integer (HAND_SIZE; i.e., hand size required for additional points)
      
    """
        # BEGIN PSEUDOCODE <-- Remove this comment when you code this function; do your coding within the pseudocode (leaving those comments in-place!)
     # Keep track of the total score (initialize score to 0)
    total_score = 0
    
    # As long as there are still letters left in the hand:
    while calculateHandlen(hand) > 0:
        
        # Display the hand
        print 'Current Hand:', 
        displayHand(hand)
        
        # Ask user for input
        word = str(raw_input('Enter word, or a "." to indicate that you are finished: '))
        
        # If the input is a single period:
        if word == '.':
        
            # End the game (break out of the loop)
            break
            
        # Otherwise (the input is not a single period):
        else:
        
            # If the word is not valid:
            if not isValidWord(word, hand, wordList):
            
                # Reject invalid word (print a message followed by a blank line)
                print 'Invalid word!'
                print
                
            # Otherwise (the word is valid):
            else:

                # Tell the user how many points the word earned, and the updated total score, in one line followed by a blank line
                user_word_score = getWordScore(word, n)
                total_score += user_word_score
                print '"' + word + '"' + ' earned ' + str(user_word_score) +' points. Total: ' + str(total_score) + ' points.'
                print 
                
                # Update the hand 
                hand = updateHand(hand, word)
                
    # Game is over (user entered a '.' or ran out of letters), so tell user the total score
    if calculateHandlen(hand) > 0:
        print 'Game over. Total score: ' + str(total_score) + ' points.'
        print
    else:
        print 'No letters left. Total score: ' + str(total_score) + ' points.'

# Playing a Game
def playGame(wordList):
    """
    Allow the user to play an arbitrary number of hands.
 
    1) Asks the user to input 'n' or 'r' or 'e'.
      * If the user inputs 'n', let the user play a new (random) hand.
      * If the user inputs 'r', let the user play the last hand again.
      * If the user inputs 'e', exit the game.
      * If the user inputs anything else, tell them their input was invalid.
 
    2) When done playing the hand, repeat from step 1
    """
    # TO DO ... <-- Remove this comment when you code this function
    # initialize empty hand
    hand = {}
    
    while True:
    # initialize variable for game_choice
        game_choice = str(raw_input('Enter n to deal a new hand, r to replay the last hand, or e to end game: '))

    # if user chooses n (i.e., new game), initialize hand by dealing hand
    # and play the hand
        if game_choice == 'n':
            hand = dealHand(HAND_SIZE)
            playHand(hand, wordList, HAND_SIZE)
            
        # if user chooses r (i.e., replay), replay existing hand
        elif game_choice == 'r':
            
            # if hand is empty, display error message
            if hand == {}:
                print 'You have not played a hand yet. Please play a new hand first!'
            
            # else, proceed to play the hand
            else:
                playHand(hand, wordList, HAND_SIZE)
    
        # if user chooses e (i.e., end game), break the loop
        elif game_choice == 'e':
            break
        
        # if user chooses another other command, print error message
        else:
            print 'Invalid command.' 
            
# Computer Chooses a Word
def compChooseWord(hand, wordList, n):
    """
    Given a hand and a wordList, find the word that gives 
    the maximum value score, and return it.

    This word should be calculated by considering all the words
    in the wordList.

    If no words in the wordList can be made from the hand, return None.

    hand: dictionary (string -> int)
    wordList: list (string)
    returns: string or None
    """
    # BEGIN PSEUDOCODE (available within ps4b.py)
    bestScore = 0

    bestWord = None

    for word in wordList:

        if isValidWord(word, hand, wordList):

            score = getWordScore(word, n)

            if score > bestScore:

                bestScore = score
                bestWord = word

    return bestWord
    
# Computer Plays a Hand
def compChooseWord(hand, wordList, n):
    """
    Given a hand and a wordList, find the word that gives 
    the maximum value score, and return it.

    This word should be calculated by considering all the words
    in the wordList.

    If no words in the wordList can be made from the hand, return None.

    hand: dictionary (string -> int)
    wordList: list (string)
    returns: string or None
    """
    # BEGIN PSEUDOCODE (available within ps4b.py)
    bestScore = 0

    bestWord = None

    for word in wordList:

        if isValidWord(word, hand, wordList):

            score = getWordScore(word, n)

            if score > bestScore:

                bestScore = score
                bestWord = word

    return bestWord
def compPlayHand(hand, wordList, n):
    """
    Allows the computer to play the given hand, following the same procedure
    as playHand, except instead of the user choosing a word, the computer 
    chooses it.

    1) The hand is displayed.
    2) The computer chooses a word.
    3) After every valid word: the word and the score for that word is 
    displayed, the remaining letters in the hand are displayed, and the 
    computer chooses another word.
    4)  The sum of the word scores is displayed when the hand finishes.
    5)  The hand finishes when the computer has exhausted its possible
    choices (i.e. compChooseWord returns None).
 
    hand: dictionary (string -> int)
    wordList: list (string)
    n: integer (HAND_SIZE; i.e., hand size required for additional points)
    """
    # TO DO ... 
    # Keep track of the total score (initialize score to 0)
    total_score = 0
    
    # As long as there are still letters left in the hand:
    while calculateHandlen(hand) > 0:
        
        # Display the hand
        print 'Current Hand:', 
        displayHand(hand)
        print 
        
        # check if the computer can still choose a word; if None, that means
        # no words available
        if compChooseWord(hand, wordList, n) == None:
            break
        
        # if not None, means there are words available
        else: 
        # computer chooses a word
            word = compChooseWord(hand, wordList, n)
            word_score = getWordScore(word, n)
            total_score += word_score
            print '"' + word + '"' + ' earned ' + str(word_score) +' points. Total: ' + str(total_score) + ' points.' 
            print
                    
            # Update the hand 
            hand = updateHand(hand, word)
        
    print 'Total score: ' + str(total_score) + ' points.'
    
# You and Your Computer
def playGame(wordList):
    """
    Allow the user to play an arbitrary number of hands.
 
    1) Asks the user to input 'n' or 'r' or 'e'.
        * If the user inputs 'e', immediately exit the game.
        * If the user inputs anything that's not 'n', 'r', or 'e', keep asking them again.

    2) Asks the user to input a 'u' or a 'c'.
        * If the user inputs anything that's not 'c' or 'u', keep asking them again.

    3) Switch functionality based on the above choices:
        * If the user inputted 'n', play a new (random) hand.
        * Else, if the user inputted 'r', play the last hand again.
          But if no hand was played, output "You have not played a hand yet. 
          Please play a new hand first!"
        
        * If the user inputted 'u', let the user play the game
          with the selected hand, using playHand.
        * If the user inputted 'c', let the computer play the 
          game with the selected hand, using compPlayHand.

    4) After the computer or user has played the hand, repeat from step 1

    wordList: list (string)
    """
    answer = ''
    hand = []
    while answer != 'e':
        second = ''
        answer = raw_input("Enter n to deal a new hand, r to replay the last hand, or e to end game: ")   
        if answer == 'e':
            break
        elif answer != 'n' and answer != 'r':
            print 'Invalid command'
        elif answer == 'r' and len(hand) <= 0:
            print 'You have not played a hand yet. Please play a new hand first!'
        else:
            while second != 'c' and second != 'u':
                second = raw_input("\nEnter u to have yourself play , c to have the computer play: ")
                if second != 'u' and second != 'c':
                    print 'Invalid command'
            if answer == 'n':
                hand = dealHand(HAND_SIZE)
                if second == 'u':
                    playHand(hand, wordList, HAND_SIZE)
                else:
                    compPlayHand(hand, wordList, HAND_SIZE)
            else:
                if second == 'u':
                    playHand(hand, wordList, HAND_SIZE)
                else:
                    compPlayHand(hand, wordList, HAND_SIZE)
                    
