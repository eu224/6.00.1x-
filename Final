# Problem 4
def uniqueValues(aDict):
	result = [k for k,v in aDict.items() if list(aDict.values()).count(v)==1]
	return sorted(result)
	
	
# Problem 5
class edx(object):
    def __init__(self, courses):
        self.myCourses = []
        for course in courses:
            self.myCourses.append(courseInfo(course))

    def setGrade(self, grade, course="6.01x"):
        """
        grade: integer greater than or equal to 0 and less than or equal to 100
        course: string 

        This method sets the grade in the courseInfo object named by `course`.   

        If `course` was not part of the initialization, then no grade is set, and no
        error is thrown.

        The method does not return a value.
        """
        #   fill in code to set the grade
        for myCourse in self.myCourses:
            if myCourse.courseName == course:
                myCourse.setGrade(grade)
        pass

    def getGrade(self, course="6.02x"):
        """
        course: string 
        
        This method gets the grade in the the courseInfo object named by `course`.
        
        returns: the integer grade for `course`.  
        If `course` was not part of the initialization, returns -1.
        """
        #   fill in code to get the grade
        for myCourse in self.myCourses:
            if myCourse.courseName == course:
                return myCourse.getGrade()
                
        return -1
        pass

    def setPset(self, pset, score, course="6.00x"):
        """
        pset: a string or a number
        score: an integer between 0 and 100
        course: string
        
        The `score` of the specified `pset` is set for the
        given `course` using the courseInfo object.
        
        If `course` is not part of the initialization, then no pset score is set,
        and no error is thrown.
        """
        #   fill in code to set the pset
        for myCourse in self.myCourses:
            if myCourse.courseName == course:
                myCourse.setPset(pset, score)
        pass

    def getPset(self, pset, course="6.00x"):
        """
        pset: a string or a number
        course: string        
        returns: The score of the specified `pset` of the given
        `course` using the courseInfo object.
        If `course` was not part of the initialization, returns -1.
        """
        #   fill in code to get the pset
        for myCourse in self.myCourses:
            if myCourse.courseName == course:
                return myCourse.getPset(pset)
                
        return -1
        pass
        
# Problem 6
class USResident(Person):
    
    def __init__(self, name, status):
		Person.__init__(self, name)
		self.status = status
		
		
		
        
    def getStatus(self):
	
        # Write your code here
		return self.status
		
# Problem 7
class Family(object):
    def __init__(self, founder):
        """ 
        Initialize with string of name of oldest ancestor
        Keyword arguments:
        founder -- string of name of oldest ancestor
        """

        self.names_to_nodes = {}
        self.root = Member(founder)    
        self.names_to_nodes[founder] = self.root   

    def set_children(self, mother, list_of_children):
        """
        Set all children of the mother. 
        
        Keyword arguments: 
        mother -- mother's name as a string
        list_of_children -- children names as strings
        """
        # convert name to Member node (should check for validity)
        mom_node = self.names_to_nodes[mother]   
        # add each child
        for c in list_of_children:           
            # create Member node for a child   
            c_member = Member(c)               
            # remember its name to node mapping
            self.names_to_nodes[c] = c_member    
            # set child's parent
            c_member.add_parent(mom_node)        
            # set the parent's child
            mom_node.add_child(c_member)         
    
    def is_parent(self, mother, kid):
        """
        Returns True or False whether mother is parent of kid. 
        
        Keyword arguments: 
        mother -- string of mother's name
        kid -- string of kid's name
        """
        mom_node = self.names_to_nodes[mother]
        child_node = self.names_to_nodes[kid]
        return child_node.is_parent(mom_node)   

    def is_child(self, kid, mother):
        """
        Returns True or False whether kid is child of mother.
        
        Keyword arguments: 
        kid -- string of kid's name
        mother -- string of mother's name
        """        
        mom_node = self.names_to_nodes[mother]   
        child_node = self.names_to_nodes[kid]
        return mom_node.is_child(child_node)

    def cousin(self, a, b):
        """
        Returns a tuple of (the cousin type, degree removed) 
        
        cousin type:
          -1 if a and b are the same node.
          -1 if either one is a direct descendant of the other
          >=0 otherwise, it calculates the distance from 
          each node to the common ancestor.  Then cousin type is 
          set to the smaller of the two distances, as described 
          in the exercises above

        degrees removed:
          >= 0
          The absolute value of the difference between the 
          distance from each node to their common ancestor.
        """
        if a == b:
            return (-1,0)
        a = self.names_to_nodes[a]
        b = self.names_to_nodes[b]
        if a.is_parent(b) or b.is_parent(a):
            return (-1,0)
        ParentA = a
        ParentB = b        
        glA = 0
        glB = 0
        removed = 0
        cType = -1
        while(ParentA.get_parent() != None):
            glA += 1
            ParentA = ParentA.get_parent()
        while(ParentB.get_parent() != None):
            glB += 1
            ParentB = ParentB.get_parent()

        if( glA > glB):
            removed = glA-glB
        if( glA < glB):
            removed = glB-glA
        ParentA=a
        ParentB=b
        if( glA > glB+1):
            for i in range(glA-glB-1):
                ParentA = ParentA.get_parent()
        elif(glB > glA+1):      
            for i in range(glB-glA-1):
                ParentB = ParentB.get_parent()       
        elif(glA == glB):    
            ParentA = a.get_parent()    
            cType = 0
        if(glA > glB):
            while ParentA.is_parent(ParentB)==False:
                ParentA = ParentA.get_parent()
                ParentB = ParentB.get_parent()
                cType += 1
            return (cType, removed)
        else:
            while ParentB.is_parent(ParentA) == False:
                ParentA = ParentA.get_parent()
                ParentB = ParentB.get_parent()
                cType += 1
            return (cType, removed)
